# Emmerich Tending App Configurations
# github.com/rayandrews
# <raydreww@gmail.com>

[general]
name                         = "Emmerich Tending App"
debug                        = true # will log all debugging things

[devices]

# ----------------------------------------------------------
# Stepper Configuration
#
# Brief:
# Stepper consisted of at least 2 pins :
# - Step Pin
# - Dir Pin
#
# However there are exists other pins (specifically
# to its driver), such as :
# - Enable Pin
# - Microstep Pin (can be 3 for Pololu A4988,
#   denotes as MS1, MS2, MS3)
#
# Notes :
# RPM, acceleration, and deceleration can be set here
# this default configuration will be used for homing
# and other basic movements
# (such as moving to spray position, etc)
# ----------------------------------------------------------
[devices.stepper]
type                         = "A4988"

# stepper x-axis
[devices.stepper.x]
key                          = "STEPPER-X"
step-pin                     = 6
step-active-state            = true
dir-pin                      = 13
dir-active-state             = true
enable-pin                   = 9
enable-active-state          = true
steps-per-mm                 = 52
microsteps                   = 8
rpm                          = 300.0
acceleration                 = 1500.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2

# stepper y-axis
[devices.stepper.y]
key                          = "STEPPER-Y"
step-pin                     = 11
step-active-state            = true
dir-pin                      = 5
dir-active-state             = false
enable-pin                   = 9
enable-active-state          = true
steps-per-mm                 = 52
microsteps                   = 8
rpm                          = 300.0
acceleration                 = 1500.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2

# stepper z-axis
[devices.stepper.z]
key                          = "STEPPER-Z"
step-pin                     = 19
step-active-state            = true
dir-pin                      = 26
dir-active-state             = false
enable-pin                   = 9
enable-active-state          = true
steps-per-mm                 = 20
microsteps                   = 8
rpm                          = 50.0
acceleration                 = 1000.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2
# ----------------------------------------------------------
# End of Stepper Configuration
# ----------------------------------------------------------

[devices.spray]
# notes that this needs to be pulled up via Raspberry PI PIN
# and the logic needs to be flipped (active-state = false)
key                          = "SPRAY"
pin                          = 21
active-state                 = false

[devices.finger]
key                          = "FINGER"
pin                          = 18
duty-cycle                   = 127
active-state                 = true
homing-duty-cycle            = 30
homing-offset                = 30 # in degree

[devices.anomaly]
key                          = "ANOMALY"
pin                          = 12
active-state                 = true

# ----------------------------------------------------------
# Limit Switch
#
# Brief: This will prevent any mechanical and software issues
# that will make the machine `out of its path`
# ----------------------------------------------------------
[devices.limit-switch]
# notes that this needs to be pulled up via Raspberry PI PIN
# and the logic needs to be flipped (active-state = false)

type                         = "input"

# limit switch x-axis
[devices.limit-switch.x]
key                          = "LIMIT-X"
pin                          = 7
active-state                 = false

# limit switch y-axis
[devices.limit-switch.y]
key                          = "LIMIT-Y"
pin                          = 8
active-state                 = false

# limit switch z-axis upper bound (top)
[devices.limit-switch.z1]
key                          = "LIMIT-Z1"
pin                          = 15
active-state                 = false

# limit switch z-axis lower bound (bottom)
[devices.limit-switch.z2]
key                          = "LIMIT-Z2"
pin                          = 16
active-state                 = false
# ----------------------------------------------------------
# End of Limit Switch
# ----------------------------------------------------------

# ----------------------------------------------------------
# Communication
#
# Brief: Communication between PLC and RaspberryPI
# ----------------------------------------------------------
[devices.communication]

[devices.communication.input]
# communication from PLC to RaspberryPI

[devices.communication.input.tending-height]
key                          = "INPUT-PLC-TENDING-HEIGHT"
pin                          = 14
active-state                 = true

[devices.communication.input.spraying-height]
key                          = "INPUT-PLC-SPRAYING-HEIGHT"
pin                          = 17
active-state                 = true

[devices.communication.input.reset]
key                          = "INPUT-PLC-RESET"
pin                          = 27
active-state                 = true

[devices.communication.input.e-stop]
key                          = "INPUT-PLC-E-STOP"
pin                          = 10
active-state                 = true

[devices.communication.output]
# communication from PLC to RaspberryPI
# notes that this needs to be pulled up via Raspberry PI PIN
# and the logic needs to be flipped (active-state = false)

[devices.communication.output.tending-ready]
key                          = "OUTPUT-PI-TENDING-READY"
pin                          = 22
active-state                 = false

[devices.communication.output.spraying-ready]
key                          = "OUTPUT-PI-SPRAYING-READY"
pin                          = 4
active-state                 = false

[devices.communication.output.tending-running]
key                          = "OUTPUT-PI-TENDING-RUNNING"
pin                          = 23
active-state                 = false

[devices.communication.output.spraying-running]
key                          = "OUTPUT-PI-SPRAYING-RUNNING"
pin                          = 24
active-state                 = false

[devices.communication.output.tending-complete]
key                          = "OUTPUT-PI-TENDING-COMPLETE"
pin                          = 25
active-state                 = false

[devices.communication.output.spraying-complete]
key                          = "OUTPUT-PI-SPRAYING-COMPLETE"
pin                          = 20
active-state                 = false
# ----------------------------------------------------------
# End of Communication
# ----------------------------------------------------------

# analog
[devices.analog]
key                          = "PCF8591"
rotary-encoder-pin           = 1

[mechanisms]

# ----------------------------------------------------------
# Spraying Mechanism
#
# Brief :
# This will do these phases :
# - Homing
# - Moving to initial position
# - Spray on
# - Do path
# - Move little bit to side
# - Spray off
# - Homing
# ----------------------------------------------------------
[mechanisms.spraying]
# initial position according to limit switch homing
position                     = [45.0, 10.0]

# coordinates after changing `imaginary homing` to
# initial position of spraying
path                         = [
  # x   y  (in mm, need to be in floating point)

  # zigzag
  [0.0,   0.0],
  [400.0,   0.0],
  [400.0, 100.0],
  [0.0, 100.0],
  [0.0, 200.0],
  [400.0, 200.0],
  [400.0, 300.0],
  [0.0, 300.0],
  [0.0, 400.0],
  [400.0, 400.0],
]

[mechanisms.spraying.stepper]
[mechanisms.spraying.stepper.x]
rpm                          = 300.0
acceleration                 = 2000.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2

[mechanisms.spraying.stepper.y]
rpm                          = 300.0
acceleration                 = 2000.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2
# ----------------------------------------------------------
# End of Spraying Mechanism
# ----------------------------------------------------------

# ----------------------------------------------------------
# Tending Mechanism
#
# Brief :
# This will do these phases :
# - Homing
# - Moving to initial position
# - Finger Down
# - Do edge path
# - Finger motor start
# - Do zigzag path
# - Finger motor stop
# - Homing
# ----------------------------------------------------------
[mechanisms.tending]
# initial position according to limit switch homing
position                     = [160.0, 90.0]

[mechanisms.tending.path]
# coordinates after changing `imaginary homing` to
# initial position of spraying
# this needs to be splitted between edge and zigzag
# because finger motor will be on after edge has been
# done
edge                         = [
  # x    y  (in mm, need to be in floating point)
  [0.0,   0.0],
  [0.0,   400.0],
  [400.0, 400.0],
  [400.0, 0.0],
  [10.0,  40.0],
]

zigzag                       = [
  # x    y  (in mm, need to be in floating point)
  [0.0,   0.0],
  [0.0,   400.0],
  [100.0, 400.0],
  [100.0, 0.0],
  [200.0, 0.0],
  [200.0, 400.0],
  [300.0, 400.0],
  [300.0, 0.0],
  [400.0, 0.0],
  [400.0, 400.0],
]

[mechanisms.tending.stepper]
[mechanisms.tending.stepper.x]
rpm                          = 300.0
acceleration                 = 1000.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2

[mechanisms.tending.stepper.y]
rpm                          = 200.0
acceleration                 = 1000.0 # steps / s^2
deceleration                 = 1000.0 # steps / s^2
# ----------------------------------------------------------
# End of Tending Mechanism
# ----------------------------------------------------------
